service: microqueue-mini

frameworkVersion: '3'

plugins:
- serverless-esbuild
- serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  memorySize: 256
  timeout: 30
  
  environment:
    STAGE: dev
    TOPICS_TABLE: MicroQueue-Topics-dev
    MESSAGES_TABLE: MicroQueue-Messages-dev
    CONSUMER_GROUPS_TABLE: MicroQueue-ConsumerGroups-dev
    OFFSETS_TABLE: MicroQueue-Offsets-dev
    MESSAGES_BUCKET: microqueue-messages-dev-local
    ARCHIVE_BUCKET: microqueue-archive-dev-local
    IS_LOCAL: true
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt TopicsTable.Arn
            - !GetAtt MessagesTable.Arn
            - !GetAtt ConsumerGroupsTable.Arn
            - !GetAtt OffsetsTable.Arn
            - !Sub "${TopicsTable.Arn}/index/*"
            - !Sub "${MessagesTable.Arn}/index/*"
        
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !GetAtt MessagesBucket.Arn
            - !Sub "${MessagesBucket.Arn}/*"
            - !GetAtt ArchiveBucket.Arn
            - !Sub "${ArchiveBucket.Arn}/*"
        
        - Effect: Allow
          Action:
            - cloudwatch:PutMetricData
          Resource: "*"

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude:
      - aws-sdk
    target: node18
    define:
      'require.resolve': undefined
    platform: node
    concurrency: 10
  
  apiGateway:
    shouldStartNameWithService: true
  
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002
    noAuth: true 
functions:
  # Topic endpoints
  createTopic:
    handler: src/lambdas/api/topics/create.handler
    events:
      - http:
          path: /topics
          method: post
          cors: true
  
  listTopics:
    handler: src/lambdas/api/topics/list.handler
    events:
      - http:
          path: /topics
          method: get
          cors: true
  
  deleteTopic:
    handler: src/lambdas/api/topics/delete.handler
    events:
      - http:
          path: /topics/{topicId}
          method: delete
          cors: true
  
  # Message endpoints
  publishMessage:
    handler: src/lambdas/api/messages/publish.handler
    events:
      - http:
          path: /topics/{topicId}/messages
          method: post
          cors: true
  
  consumeMessages:
    handler: src/lambdas/api/messages/consume.handler
    timeout: 30
    events:
      - http:
          path: /topics/{topicId}/messages
          method: get
          cors: true
  
  # Consumer Group endpoints
  createConsumerGroup:
    handler: src/lambdas/api/consumer-groups/create.handler
    events:
      - http:
          path: /consumer-groups
          method: post
          cors: true
  
  listConsumerGroups:
    handler: src/lambdas/api/consumer-groups/list.handler
    events:
      - http:
          path: /consumer-groups
          method: get
          cors: true
  
  # Metrics endpoint
  getMetrics:
    handler: src/lambdas/api/metrics/get.handler
    events:
      - http:
          path: /metrics
          method: get
          cors: true
  
  # Background jobs
  messageCleanup:
    handler: src/lambdas/maintenance/cleanup.handler
    timeout: 300
    memorySize: 512
    events:
      - schedule: rate(15 minutes)
  
  metricsAggregator:
    handler: src/lambdas/maintenance/metrics-aggregator.handler
    timeout: 60
    events:
      - schedule: rate(5 minutes)
  
  messagePublisher:
    handler: src/lambdas/processors/message-publisher.handler
    timeout: 60
    memorySize: 512
    events:
      - sqs:
          arn: !GetAtt MessagePublisherQueue.Arn
          batchSize: 10
          maximumBatchingWindow: 30

resources:
  Resources:
    # DynamoDB Tables
    TopicsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TOPICS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: topicId
            AttributeType: S
        KeySchema:
          - AttributeName: topicId
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: topicId
            AttributeType: S
          - AttributeName: sequenceNumber
            AttributeType: N
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: topicId
            KeyType: HASH
          - AttributeName: sequenceNumber
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: MessageIdIndex
            KeySchema:
              - AttributeName: messageId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    ConsumerGroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONSUMER_GROUPS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: topicId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: topicId
            KeyType: RANGE
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    OffsetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.OFFSETS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: topicId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: topicId
            KeyType: RANGE
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    # S3 Buckets
    MessagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MESSAGES_BUCKET}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: ArchiveRule
              Status: Enabled
              Transitions:
                - TransitionInDays: 30
                  StorageClass: STANDARD_IA
    
    ArchiveBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ARCHIVE_BUCKET}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: GlacierRule
              Status: Enabled
              Transitions:
                - TransitionInDays: 1
                  StorageClass: GLACIER
    
    # SQS Queue for asynchronous message processing
    MessagePublisherQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MicroQueue-MessagePublisher-${self:provider.stage}
        VisibilityTimeout: 60
        MessageRetentionPeriod: 1209600  # 14 days
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt MessagePublisherDeadLetterQueue.Arn
          maxReceiveCount: 5
    
    MessagePublisherDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MicroQueue-MessagePublisher-DLQ-${self:provider.stage}
        MessageRetentionPeriod: 1209600  # 14 days
    
    # CloudWatch Dashboard
    MicroQueueDashboard:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        DashboardName: MicroQueue-Dashboard-${self:provider.stage}
        DashboardBody: !Sub |
          {
            "widgets": [
              {
                "type": "metric",
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 6,
                "properties": {
                  "metrics": [
                    [ "MicroQueue", "TotalTopics", { "stat": "Maximum" } ],
                    [ ".", "TotalMessages", { "stat": "Maximum" } ],
                    [ ".", "TotalConsumerGroups", { "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${self:provider.region}",
                  "title": "System Overview",
                  "period": 300
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 6,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    [ "MicroQueue", "AveragePublishRate", { "stat": "Maximum" } ],
                    [ ".", "AverageConsumeRate", { "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${self:provider.region}",
                  "title": "Message Rates",
                  "period": 300
                }
              },
              {
                "type": "metric",
                "x": 12,
                "y": 6,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    [ "MicroQueue", "StorageUsed", { "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${self:provider.region}",
                  "title": "Storage Usage",
                  "period": 300
                }
              }
            ]
          }

  Outputs:
    ApiEndpoint:
      Description: "API Gateway endpoint URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    
    TopicsTableName:
      Description: "Topics table name"
      Value: !Ref TopicsTable
    
    MessagesTableName:
      Description: "Messages table name"
      Value: !Ref MessagesTable
    
    ConsumerGroupsTableName:
      Description: "Consumer Groups table name"
      Value: !Ref ConsumerGroupsTable
    
    OffsetsTableName:
      Description: "Offsets table name"
      Value: !Ref OffsetsTable
    
    MessagesBucketName:
      Description: "Messages bucket name"
      Value: !Ref MessagesBucket
    
    ArchiveBucketName:
      Description: "Archive bucket name"
      Value: !Ref ArchiveBucket
    
    MessagePublisherQueueUrl:
      Description: "Message Publisher SQS Queue URL"
      Value: !Ref MessagePublisherQueue