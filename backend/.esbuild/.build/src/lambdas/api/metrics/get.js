"use strict";var ae=Object.create;var U=Object.defineProperty;var ce=Object.getOwnPropertyDescriptor;var me=Object.getOwnPropertyNames;var ue=Object.getPrototypeOf,pe=Object.prototype.hasOwnProperty;var H=(e,t)=>()=>(e&&(t=e(e=0)),t);var K=(e,t)=>{for(var o in t)U(e,o,{get:t[o],enumerable:!0})},q=(e,t,o,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of me(t))!pe.call(e,r)&&r!==o&&U(e,r,{get:()=>t[r],enumerable:!(i=ce(t,r))||i.enumerable});return e};var Ee=(e,t,o)=>(o=e!=null?ae(ue(e)):{},q(t||!e||!e.__esModule?U(o,"default",{value:e,enumerable:!0}):o,e)),j=e=>q(U({},"__esModule",{value:!0}),e);var R,g,n,Pe,M,p,E,O=H(()=>{"use strict";R={DEV:"dev",STAGING:"staging",PROD:"prod"},g=process.env.STAGE||R.DEV,n={TOPICS:process.env.TOPICS_TABLE||`MicroQueue-Topics-${g}`,MESSAGES:process.env.MESSAGES_TABLE||`MicroQueue-Messages-${g}`,CONSUMER_GROUPS:process.env.CONSUMER_GROUPS_TABLE||`MicroQueue-ConsumerGroups-${g}`,OFFSETS:process.env.OFFSETS_TABLE||`MicroQueue-Offsets-${g}`},Pe={MESSAGES:process.env.MESSAGES_BUCKET||`microqueue-messages-${g}`,ARCHIVE:process.env.ARCHIVE_BUCKET||`microqueue-archive-${g}`},M={MAX_TOPIC_NAME_LENGTH:100,MAX_DESCRIPTION_LENGTH:500,MAX_MESSAGE_SIZE_BYTES:256*1024,MAX_METADATA_KEYS:10,MAX_METADATA_KEY_LENGTH:128,MAX_METADATA_VALUE_LENGTH:256,MAX_RETENTION_HOURS:7*24,DEFAULT_RETENTION_HOURS:24,MAX_MESSAGES_PER_CONSUME:100,DEFAULT_MESSAGES_PER_CONSUME:10,MAX_WAIT_TIME_SECONDS:20,DEFAULT_WAIT_TIME_SECONDS:0},p={INTERNAL_ERROR:"INTERNAL_ERROR",VALIDATION_ERROR:"VALIDATION_ERROR",RESOURCE_NOT_FOUND:"RESOURCE_NOT_FOUND",TOPIC_NOT_FOUND:"TOPIC_NOT_FOUND",TOPIC_ALREADY_EXISTS:"TOPIC_ALREADY_EXISTS",MESSAGE_NOT_FOUND:"MESSAGE_NOT_FOUND",MESSAGE_TOO_LARGE:"MESSAGE_TOO_LARGE",INVALID_MESSAGE_FORMAT:"INVALID_MESSAGE_FORMAT",CONSUMER_GROUP_NOT_FOUND:"CONSUMER_GROUP_NOT_FOUND",CONSUMER_GROUP_ALREADY_EXISTS:"CONSUMER_GROUP_ALREADY_EXISTS",RATE_LIMIT_EXCEEDED:"RATE_LIMIT_EXCEEDED",SERVICE_UNAVAILABLE:"SERVICE_UNAVAILABLE"},E={OK:200,CREATED:201,BAD_REQUEST:400,UNAUTHORIZED:401,FORBIDDEN:403,NOT_FOUND:404,CONFLICT:409,PAYLOAD_TOO_LARGE:413,UNPROCESSABLE_ENTITY:422,TOO_MANY_REQUESTS:429,INTERNAL_SERVER_ERROR:500,SERVICE_UNAVAILABLE:503}});var k={};K(k,{config:()=>C,default:()=>de});var Te,J,ge,C,de,V=H(()=>{"use strict";O();Te={serviceName:"MicroQueue-Mini",version:"1.0.0",dynamodb:{maxRetries:3,timeout:5e3},s3:{maxRetries:3,timeout:1e4},api:{corsOrigins:"*",rateLimit:{windowMs:60*1e3,max:100}},logging:{level:"info",format:"json"},topics:{maxTopicsPerAccount:100,defaultRetentionHours:M.DEFAULT_RETENTION_HOURS},messages:{maxSizeBytes:M.MAX_MESSAGE_SIZE_BYTES,batchSize:25},consumers:{defaultMaxMessages:M.DEFAULT_MESSAGES_PER_CONSUME,defaultWaitTimeSeconds:M.DEFAULT_WAIT_TIME_SECONDS}},J={[R.DEV]:{logging:{level:"debug"},topics:{maxTopicsPerAccount:20}},[R.STAGING]:{logging:{level:"debug"},topics:{maxTopicsPerAccount:50}},[R.PROD]:{logging:{level:"info"},topics:{maxTopicsPerAccount:100},api:{rateLimit:{windowMs:60*1e3,max:200}}}},ge=J[g]||J[R.DEV],C={...Te,...ge,env:g},de=C});var we={};K(we,{handler:()=>De});module.exports=j(we);O();O();var m=class extends Error{constructor(o,i,r,s){super(i);this.code=o,this.statusCode=r,this.details=s,this.name="AppError",Error.captureStackTrace&&Error.captureStackTrace(this,m)}toResponse(){return{success:!1,error:{code:this.code,message:this.message,details:this.details}}}},u={internalError:(e="An internal server error occurred",t)=>new m(p.INTERNAL_ERROR,e,E.INTERNAL_SERVER_ERROR,t),validationError:(e="Validation error",t)=>new m(p.VALIDATION_ERROR,e,E.BAD_REQUEST,t),resourceNotFound:(e,t)=>new m(p.RESOURCE_NOT_FOUND,`${e} with id '${t}' not found`,E.NOT_FOUND),topicNotFound:e=>new m(p.TOPIC_NOT_FOUND,`Topic '${e}' not found`,E.NOT_FOUND),topicAlreadyExists:e=>new m(p.TOPIC_ALREADY_EXISTS,`Topic with name '${e}' already exists`,E.CONFLICT),messageNotFound:e=>new m(p.MESSAGE_NOT_FOUND,`Message '${e}' not found`,E.NOT_FOUND),messageTooLarge:(e,t)=>new m(p.MESSAGE_TOO_LARGE,`Message size (${e} bytes) exceeds maximum allowed size (${t} bytes)`,E.PAYLOAD_TOO_LARGE),consumerGroupNotFound:e=>new m(p.CONSUMER_GROUP_NOT_FOUND,`Consumer group '${e}' not found`,E.NOT_FOUND),consumerGroupAlreadyExists:(e,t)=>new m(p.CONSUMER_GROUP_ALREADY_EXISTS,`Consumer group with name '${e}' already exists for topic '${t}'`,E.CONFLICT),rateLimitExceeded:()=>new m(p.RATE_LIMIT_EXCEEDED,"Rate limit exceeded",E.TOO_MANY_REQUESTS),serviceUnavailable:(e="Service temporarily unavailable")=>new m(p.SERVICE_UNAVAILABLE,e,E.SERVICE_UNAVAILABLE)},Q=e=>{if(console.error("Error:",e),e instanceof m)return{statusCode:e.statusCode,body:JSON.stringify(e.toResponse()),headers:{"Content-Type":"application/json"}};if(e.code==="ConditionalCheckFailedException"){let o=u.resourceNotFound("Resource","unknown");return{statusCode:o.statusCode,body:JSON.stringify(o.toResponse()),headers:{"Content-Type":"application/json"}}}if(e.code==="ThrottlingException"){let o=u.rateLimitExceeded();return{statusCode:o.statusCode,body:JSON.stringify(o.toResponse()),headers:{"Content-Type":"application/json"}}}let t=u.internalError(e.message||"An unexpected error occurred");return{statusCode:t.statusCode,body:JSON.stringify(t.toResponse()),headers:{"Content-Type":"application/json"}}};var le=e=>({success:!0,data:e}),W=(e,t=200)=>({statusCode:t,body:JSON.stringify(le(e)),headers:{"Content-Type":"application/json"}});var Z=require("aws-sdk");V();var ee={maxRetries:C.dynamodb.maxRetries,httpOptions:{timeout:C.dynamodb.timeout}};process.env.DYNAMODB_ENDPOINT&&(ee.endpoint=process.env.DYNAMODB_ENDPOINT);var a=new Z.DynamoDB.DocumentClient(ee);O();var f=(V(),j(k));var Se={error:0,warn:1,info:2,debug:3},D=Se[f.logging.level]||2,w=(e,t,o)=>{let i=new Date().toISOString(),r=process.env.AWS_REQUEST_ID||"-";if(f.logging.format==="json"){let l={timestamp:i,level:e,message:t,requestId:r,service:f.serviceName,version:f.version,env:f.env,...o?{data:o}:{}};return JSON.stringify(l)}let s=`[${i}] [${e.toUpperCase()}] [${r}] ${t}`;return o&&(s+=` ${JSON.stringify(o)}`),s},$=class{error(t,o){D>=0&&console.error(w("error",t,o))}warn(t,o){D>=1&&console.warn(w("warn",t,o))}info(t,o){D>=2&&console.info(w("info",t,o))}debug(t,o){D>=3&&console.debug(w("debug",t,o))}},c=new $,T=c;var te=Ee(require("aws-sdk")),Ae=new te.default.CloudWatch,Ne=async e=>{c.debug("Calculating topic metrics",{topicId:e});try{let t=await a.get({TableName:n.TOPICS,Key:{topicId:e}}).promise();if(!t.Item)throw u.topicNotFound(e);let o=t.Item,i=Date.now()-60*60*1e3,l=((await a.query({TableName:n.MESSAGES,KeyConditionExpression:"topicId = :topicId AND sequenceNumber > :seq",FilterExpression:"#ts >= :ts",ExpressionAttributeNames:{"#ts":"timestamp"},ExpressionAttributeValues:{":topicId":e,":seq":0,":ts":i},Select:"COUNT"}).promise()).Count||0)/60,x=((await a.query({TableName:n.MESSAGES,KeyConditionExpression:"topicId = :topicId",ExpressionAttributeValues:{":topicId":e},Limit:100,ScanIndexForward:!1,ProjectionExpression:"size"}).promise()).Items||[]).map(N=>N.size||0),L=x.reduce((N,v)=>N+v,0),y=x.length>0?Math.round(L/x.length):0,h=await a.query({TableName:n.MESSAGES,KeyConditionExpression:"topicId = :topicId",ExpressionAttributeValues:{":topicId":e},Limit:1,ScanIndexForward:!0,ProjectionExpression:"timestamp"}).promise(),S=await a.query({TableName:n.MESSAGES,KeyConditionExpression:"topicId = :topicId",ExpressionAttributeValues:{":topicId":e},Limit:1,ScanIndexForward:!1,ProjectionExpression:"timestamp"}).promise(),P=h.Items&&h.Items.length>0?h.Items[0].timestamp:0,b=S.Items&&S.Items.length>0?S.Items[0].timestamp:0,A=(await a.query({TableName:n.CONSUMER_GROUPS,KeyConditionExpression:"topicId = :topicId",ExpressionAttributeValues:{":topicId":e}}).promise()).Items||[],d=0;for(let N of A){let v=N.groupId,F=await a.get({TableName:n.OFFSETS,Key:{groupId:v,topicId:e}}).promise();if(F.Item){let Y=F.Item.lastConsumedTimestamp||0,ie=F.Item.lastSequenceNumber||0;if(Y>i){let ne=ie,z=(Y-o.createdAt)/(60*60*1e3);z>0&&(d+=ne/(z*60))}}}let G=A.length>0?d/A.length:0;return{topicId:e,name:o.name,messageCount:o.messageCount||0,publishRate:l,consumeRate:G,averageMessageSize:y,oldestMessage:P,newestMessage:b}}catch(t){throw c.error("Error calculating topic metrics",{error:t,topicId:e}),t}},_e=async()=>{c.debug("Calculating system metrics");try{let[e,t,o]=await Promise.all([a.scan({TableName:n.TOPICS,Select:"COUNT"}).promise(),a.scan({TableName:n.MESSAGES,Select:"COUNT"}).promise(),a.scan({TableName:n.CONSUMER_GROUPS,Select:"COUNT"}).promise()]),i=e.Count||0,r=t.Count||0,s=o.Count||0,l=Date.now()-60*60*1e3,L=((await a.scan({TableName:n.MESSAGES,FilterExpression:"#ts >= :ts",ExpressionAttributeNames:{"#ts":"timestamp"},ExpressionAttributeValues:{":ts":l},Select:"COUNT"}).promise()).Count||0)/60,y=0,S=(await a.scan({TableName:n.OFFSETS,Limit:100}).promise()).Items||[];for(let d of S)d.lastConsumedTimestamp>l&&(y+=d.lastSequenceNumber||0);let P=S.length>0?y/S.length/60:0,b=0,A=((await a.scan({TableName:n.MESSAGES,Limit:100,ProjectionExpression:"size"}).promise()).Items||[]).map(d=>d.size||0);return A.length>0&&(b=A.reduce((G,N)=>G+N,0)/A.length*r),{totalTopics:i,totalMessages:r,totalConsumerGroups:s,averagePublishRate:L,averageConsumeRate:P,storageUsed:b}}catch(e){throw c.error("Error calculating system metrics",{error:e}),e}},Re=async(e=[],t)=>{try{let o=new Date,i=[];for(let s of e)i.push({MetricName:"MessageCount",Dimensions:[{Name:"TopicId",Value:s.topicId},{Name:"TopicName",Value:s.name}],Value:s.messageCount,Timestamp:o,Unit:"Count"},{MetricName:"PublishRate",Dimensions:[{Name:"TopicId",Value:s.topicId},{Name:"TopicName",Value:s.name}],Value:s.publishRate,Timestamp:o,Unit:"Count/Minute"},{MetricName:"ConsumeRate",Dimensions:[{Name:"TopicId",Value:s.topicId},{Name:"TopicName",Value:s.name}],Value:s.consumeRate,Timestamp:o,Unit:"Count/Minute"},{MetricName:"AverageMessageSize",Dimensions:[{Name:"TopicId",Value:s.topicId},{Name:"TopicName",Value:s.name}],Value:s.averageMessageSize,Timestamp:o,Unit:"Bytes"});t&&i.push({MetricName:"TotalTopics",Value:t.totalTopics,Timestamp:o,Unit:"Count"},{MetricName:"TotalMessages",Value:t.totalMessages,Timestamp:o,Unit:"Count"},{MetricName:"TotalConsumerGroups",Value:t.totalConsumerGroups,Timestamp:o,Unit:"Count"},{MetricName:"AveragePublishRate",Value:t.averagePublishRate,Timestamp:o,Unit:"Count/Minute"},{MetricName:"AverageConsumeRate",Value:t.averageConsumeRate,Timestamp:o,Unit:"Count/Minute"},{MetricName:"StorageUsed",Value:t.storageUsed,Timestamp:o,Unit:"Bytes"});let r=20;for(let s=0;s<i.length;s+=r){let l=i.slice(s,s+r);await Ae.putMetricData({Namespace:"MicroQueue",MetricData:l}).promise()}}catch(o){c.error("Error pushing metrics to CloudWatch",{error:o})}},_={calculateTopicMetrics:Ne,calculateSystemMetrics:_e,pushMetricsToCloudWatch:Re};O();var Me=async e=>{c.debug("Creating topic",{topicId:e.topicId});try{return await a.put({TableName:n.TOPICS,Item:e,ConditionExpression:"attribute_not_exists(topicId)"}).promise(),e}catch(t){throw c.error("Error creating topic",{error:t,topic:e}),t.code==="ConditionalCheckFailedException"?u.topicAlreadyExists(e.name):t}},B=async e=>{c.debug("Getting topic",{topicId:e});try{let t=await a.get({TableName:n.TOPICS,Key:{topicId:e}}).promise();if(!t.Item)throw u.topicNotFound(e);return t.Item}catch(t){throw c.error("Error getting topic",{error:t,topicId:e}),t.code==="ResourceNotFoundException"?u.topicNotFound(e):t}},Oe=async e=>{c.debug("Getting topic by name",{name:e});try{let t=await a.scan({TableName:n.TOPICS,FilterExpression:"#name = :name",ExpressionAttributeNames:{"#name":"name"},ExpressionAttributeValues:{":name":e},Limit:1}).promise();return t.Items&&t.Items.length>0?t.Items[0]:null}catch(t){throw c.error("Error getting topic by name",{error:t,name:e}),t}},Ce=async()=>{c.debug("Listing topics");try{return(await a.scan({TableName:n.TOPICS}).promise()).Items||[]}catch(e){throw c.error("Error listing topics",{error:e}),e}},fe=async e=>{c.debug("Deleting topic",{topicId:e});try{await a.delete({TableName:n.TOPICS,Key:{topicId:e},ConditionExpression:"attribute_exists(topicId)"}).promise()}catch(t){throw c.error("Error deleting topic",{error:t,topicId:e}),t.code==="ConditionalCheckFailedException"?u.topicNotFound(e):t}},Ie=async(e,t)=>{c.debug("Incrementing topic message count",{topicId:e,timestamp:t});try{await a.update({TableName:n.TOPICS,Key:{topicId:e},UpdateExpression:"SET messageCount = messageCount + :inc, lastMessageTimestamp = :ts",ExpressionAttributeValues:{":inc":1,":ts":t},ConditionExpression:"attribute_exists(topicId)"}).promise()}catch(o){throw c.error("Error incrementing message count",{error:o,topicId:e}),o.code==="ConditionalCheckFailedException"?u.topicNotFound(e):o}},xe=async(e,t)=>{c.debug("Updating topic",{topicId:e,updates:t});let o=[],i={},r={};if(Object.entries(t).forEach(([s,l])=>{l!==void 0&&(o.push(`#${s} = :${s}`),i[`#${s}`]=s,r[`:${s}`]=l)}),o.length===0)return B(e);try{return await a.update({TableName:n.TOPICS,Key:{topicId:e},UpdateExpression:`SET ${o.join(", ")}`,ExpressionAttributeNames:i,ExpressionAttributeValues:r,ConditionExpression:"attribute_exists(topicId)",ReturnValues:"NONE"}).promise(),B(e)}catch(s){throw c.error("Error updating topic",{error:s,topicId:e}),s.code==="ConditionalCheckFailedException"?u.topicNotFound(e):s}},I={createTopic:Me,getTopic:B,getTopicByName:Oe,listTopics:Ce,deleteTopic:fe,incrementMessageCount:Ie,updateTopic:xe};var ye=async e=>(T.debug("Getting topic metrics",{topicId:e}),await I.getTopic(e),_.calculateTopicMetrics(e)),he=async()=>{T.debug("Getting all topic metrics");let t=(await I.listTopics()).map(o=>_.calculateTopicMetrics(o.topicId));return Promise.all(t)},X=async()=>(T.debug("Getting system metrics"),_.calculateSystemMetrics()),be=async()=>{T.debug("Collecting and publishing metrics");try{let e=await X(),o=(await I.listTopics()).slice(0,10),i=await Promise.all(o.map(r=>_.calculateTopicMetrics(r.topicId)));await _.pushMetricsToCloudWatch(i,e),T.info("Metrics published successfully")}catch(e){T.error("Error collecting and publishing metrics",{error:e})}},Ue=async()=>{T.debug("Getting dashboard metrics");let e=await X(),o=(await I.listTopics()).slice(0,20),i=await Promise.all(o.map(r=>_.calculateTopicMetrics(r.topicId)));return i.sort((r,s)=>s.messageCount-r.messageCount),{system:e,topics:i}},oe={getTopicMetrics:ye,getAllTopicMetrics:he,getSystemMetrics:X,collectAndPublishMetrics:be,getDashboardMetrics:Ue};var De=async e=>{try{T.debug("Get metrics request",{event:e});let t=await oe.getDashboardMetrics();return W(t)}catch(t){return T.error("Error getting metrics",{error:t}),Q(t)}};0&&(module.exports={handler});
//# sourceMappingURL=get.js.map
