{
  "version": 3,
  "sources": ["../../../../../node_modules/dotenv/lib/main.js", "../../../../../src/lambdas/maintenance/metrics-aggregator.ts", "../../../../../src/data/clients/dynamo-client.ts", "../../../../../src/common/constants.ts", "../../../../../src/common/logger.ts", "../../../../../src/common/errors.ts", "../../../../../src/data/repositories/metric-repository.ts", "../../../../../src/data/repositories/topic-repository.ts", "../../../../../src/services/metric-service.ts"],
  "sourcesContent": ["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n", "import { ScheduledEvent, Context } from 'aws-lambda';\nimport metricService from '../../services/metric-service';\nimport logger from '../../common/logger';\n\nexport const handler = async (\n  event: ScheduledEvent,\n  context: Context\n): Promise<{ success: boolean }> => {\n  logger.info('Starting metrics aggregation', { event });\n\n  try {\n    await metricService.collectAndPublishMetrics();\n\n    logger.info('Metrics aggregation completed');\n\n    return {\n      success: true,\n    };\n  } catch (error) {\n    logger.error('Error during metrics aggregation', { error });\n    \n  \n    return {\n      success: false,\n    };\n  }\n};", "import { DynamoDB } from 'aws-sdk';\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\n// Configure DynamoDB client\nconst options: DynamoDB.ClientConfiguration = {\n  region: process.env.AWS_REGION || 'us-east-1',\n  maxRetries: 3,\n  httpOptions: {\n    timeout: 5000,\n  },\n  ...(process.env.IS_LOCAL && {\n    accessKeyId: 'localstack',\n    secretAccessKey: 'localstack',\n  })\n};\n\n\nif (process.env.DYNAMODB_ENDPOINT) {\n  console.log(`Using local DynamoDB endpoint: ${process.env.DYNAMODB_ENDPOINT}`);\n  options.endpoint = process.env.DYNAMODB_ENDPOINT;\n}\n\n\nexport const dynamoClient = new DynamoDB.DocumentClient(options);\n\nexport default dynamoClient;", "// Environment names\nexport const ENV = {\n    DEV: 'dev',\n    STAGING: 'staging',\n    PROD: 'prod',\n  };\n  \n  // Current environment\n  export const STAGE = process.env.STAGE || ENV.DEV;\n  \n  // DynamoDB table names\n  export const TABLES = {\n    TOPICS: process.env.TOPICS_TABLE || `MicroQueue-Topics-${STAGE}`,\n    MESSAGES: process.env.MESSAGES_TABLE || `MicroQueue-Messages-${STAGE}`,\n    CONSUMER_GROUPS: process.env.CONSUMER_GROUPS_TABLE || `MicroQueue-ConsumerGroups-${STAGE}`,\n    OFFSETS: process.env.OFFSETS_TABLE || `MicroQueue-Offsets-${STAGE}`,\n  };\n  \n  // S3 bucket names\n  export const BUCKETS = {\n    MESSAGES: process.env.MESSAGES_BUCKET || `microqueue-messages-${STAGE}`,\n    ARCHIVE: process.env.ARCHIVE_BUCKET || `microqueue-archive-${STAGE}`,\n  };\n  \n  // System limits\n  export const LIMITS = {\n    MAX_TOPIC_NAME_LENGTH: 100,\n    MAX_DESCRIPTION_LENGTH: 500,\n    MAX_MESSAGE_SIZE_BYTES: 256 * 1024, // 256KB\n    MAX_METADATA_KEYS: 10,\n    MAX_METADATA_KEY_LENGTH: 128,\n    MAX_METADATA_VALUE_LENGTH: 256,\n    MAX_RETENTION_HOURS: 7 * 24, // 1 week\n    DEFAULT_RETENTION_HOURS: 24, // 1 day\n    MAX_MESSAGES_PER_CONSUME: 100,\n    DEFAULT_MESSAGES_PER_CONSUME: 10,\n    MAX_WAIT_TIME_SECONDS: 20,\n    DEFAULT_WAIT_TIME_SECONDS: 0,\n  };\n  \n  // Error codes\n  export const ERROR_CODES = {\n    // General errors\n    INTERNAL_ERROR: 'INTERNAL_ERROR',\n    VALIDATION_ERROR: 'VALIDATION_ERROR',\n    RESOURCE_NOT_FOUND: 'RESOURCE_NOT_FOUND',\n    \n    // Topic errors\n    TOPIC_NOT_FOUND: 'TOPIC_NOT_FOUND',\n    TOPIC_ALREADY_EXISTS: 'TOPIC_ALREADY_EXISTS',\n    \n    // Message errors\n    MESSAGE_NOT_FOUND: 'MESSAGE_NOT_FOUND',\n    MESSAGE_TOO_LARGE: 'MESSAGE_TOO_LARGE',\n    INVALID_MESSAGE_FORMAT: 'INVALID_MESSAGE_FORMAT',\n    \n    // Consumer errors\n    CONSUMER_GROUP_NOT_FOUND: 'CONSUMER_GROUP_NOT_FOUND',\n    CONSUMER_GROUP_ALREADY_EXISTS: 'CONSUMER_GROUP_ALREADY_EXISTS',\n    \n    // System errors\n    RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',\n    SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n  };\n  \n  // HTTP Status codes\n  export const HTTP_STATUS = {\n    OK: 200,\n    CREATED: 201,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    CONFLICT: 409,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_ENTITY: 422,\n    TOO_MANY_REQUESTS: 429,\n    INTERNAL_SERVER_ERROR: 500,\n    SERVICE_UNAVAILABLE: 503,\n  };\n  \n  // Content types\n  export const CONTENT_TYPES = {\n    JSON: 'application/json',\n    TEXT: 'text/plain',\n    XML: 'application/xml',\n    BINARY: 'application/octet-stream',\n  };\n  \n  // Raft consensus algorithm constants\n  export const RAFT = {\n    HEARTBEAT_INTERVAL_MS: 100,\n    ELECTION_TIMEOUT_MIN_MS: 150,\n    ELECTION_TIMEOUT_MAX_MS: 300,\n    MAX_LOG_ENTRIES_PER_REQUEST: 100,\n  };", "import * as dotenv from 'dotenv';\ndotenv.config();\n\n// Log levels\nexport enum LogLevel {\n  ERROR = 0,\n  WARN = 1,\n  INFO = 2,\n  DEBUG = 3,\n}\n\n// Map string log levels to enum\nconst LOG_LEVEL_MAP: Record<string, LogLevel> = {\n  error: LogLevel.ERROR,\n  warn: LogLevel.WARN,\n  info: LogLevel.INFO,\n  debug: LogLevel.DEBUG,\n};\n\n// Get current log level from environment or default to INFO\nconst logLevel = process.env.LOG_LEVEL || 'info';\nconst logFormat = process.env.LOG_FORMAT || 'json';\nconst currentLogLevel = LOG_LEVEL_MAP[logLevel] || LogLevel.INFO;\n\n/**\n * Format log message according to config\n */\nconst formatLogMessage = (level: string, message: string, data?: any): string => {\n  const timestamp = new Date().toISOString();\n  const requestId = process.env.AWS_REQUEST_ID || '-';\n  \n  if (logFormat === 'json') {\n    const logObject = {\n      timestamp,\n      level,\n      message,\n      requestId,\n      service: 'MicroQueue-Mini',\n      version: '1.0.0',\n      env: process.env.STAGE || 'dev',\n      ...(data ? { data } : {}),\n    };\n    \n    return JSON.stringify(logObject);\n  }\n  \n  // Default to plain text format\n  let logMessage = `[${timestamp}] [${level.toUpperCase()}] [${requestId}] ${message}`;\n  \n  if (data) {\n    logMessage += ` ${JSON.stringify(data)}`;\n  }\n  \n  return logMessage;\n};\n\n/**\n * Logger class\n */\nclass Logger {\n  /**\n   * Error level logging\n   */\n  error(message: string, data?: any): void {\n    if (currentLogLevel >= LogLevel.ERROR) {\n      console.error(formatLogMessage('error', message, data));\n    }\n  }\n  \n  /**\n   * Warning level logging\n   */\n  warn(message: string, data?: any): void {\n    if (currentLogLevel >= LogLevel.WARN) {\n      console.warn(formatLogMessage('warn', message, data));\n    }\n  }\n  \n  /**\n   * Info level logging\n   */\n  info(message: string, data?: any): void {\n    if (currentLogLevel >= LogLevel.INFO) {\n      console.info(formatLogMessage('info', message, data));\n    }\n  }\n  \n  /**\n   * Debug level logging\n   */\n  debug(message: string, data?: any): void {\n    if (currentLogLevel >= LogLevel.DEBUG) {\n      console.debug(formatLogMessage('debug', message, data));\n    }\n  }\n}\n\n// Export singleton logger instance\nexport const logger = new Logger();\n\nexport default logger;", "import { MicroQueueError } from './types';\nimport { ERROR_CODES, HTTP_STATUS } from './constants';\n\nexport class AppError extends Error implements MicroQueueError {\n  code: string;\n  statusCode: number;\n  details?: any;\n\n  constructor(code: string, message: string, statusCode: number, details?: any) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.details = details;\n    this.name = 'AppError';\n    \n    // Capturing the stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AppError);\n    }\n  }\n\n  \n  toResponse() {\n    return {\n      success: false,\n      error: {\n        code: this.code,\n        message: this.message,\n        details: this.details,\n      },\n    };\n  }\n}\n\nexport const Errors = {\n  // General errors\n  internalError: (message = 'An internal server error occurred', details?: any) => \n    new AppError(ERROR_CODES.INTERNAL_ERROR, message, HTTP_STATUS.INTERNAL_SERVER_ERROR, details),\n  \n  validationError: (message = 'Validation error', details?: any) => \n    new AppError(ERROR_CODES.VALIDATION_ERROR, message, HTTP_STATUS.BAD_REQUEST, details),\n  \n  resourceNotFound: (resource: string, id: string) => \n    new AppError(ERROR_CODES.RESOURCE_NOT_FOUND, `${resource} with id '${id}' not found`, HTTP_STATUS.NOT_FOUND),\n  \n  // Topic errors\n  topicNotFound: (topicId: string) => \n    new AppError(ERROR_CODES.TOPIC_NOT_FOUND, `Topic '${topicId}' not found`, HTTP_STATUS.NOT_FOUND),\n  \n  topicAlreadyExists: (name: string) => \n    new AppError(ERROR_CODES.TOPIC_ALREADY_EXISTS, `Topic with name '${name}' already exists`, HTTP_STATUS.CONFLICT),\n  \n  // Message errors\n  messageNotFound: (messageId: string) => \n    new AppError(ERROR_CODES.MESSAGE_NOT_FOUND, `Message '${messageId}' not found`, HTTP_STATUS.NOT_FOUND),\n  \n  messageTooLarge: (size: number, maxSize: number) => \n    new AppError(\n      ERROR_CODES.MESSAGE_TOO_LARGE, \n      `Message size (${size} bytes) exceeds maximum allowed size (${maxSize} bytes)`, \n      HTTP_STATUS.PAYLOAD_TOO_LARGE\n    ),\n  \n  // Consumer errors\n  consumerGroupNotFound: (groupId: string) => \n    new AppError(ERROR_CODES.CONSUMER_GROUP_NOT_FOUND, `Consumer group '${groupId}' not found`, HTTP_STATUS.NOT_FOUND),\n  \n  consumerGroupAlreadyExists: (name: string, topicId: string) => \n    new AppError(\n      ERROR_CODES.CONSUMER_GROUP_ALREADY_EXISTS, \n      `Consumer group with name '${name}' already exists for topic '${topicId}'`, \n      HTTP_STATUS.CONFLICT\n    ),\n  \n  // System errors\n  rateLimitExceeded: () => \n    new AppError(ERROR_CODES.RATE_LIMIT_EXCEEDED, 'Rate limit exceeded', HTTP_STATUS.TOO_MANY_REQUESTS),\n  \n  serviceUnavailable: (message = 'Service temporarily unavailable') => \n    new AppError(ERROR_CODES.SERVICE_UNAVAILABLE, message, HTTP_STATUS.SERVICE_UNAVAILABLE),\n};\n\n\nexport const errorHandler = (err: any) => {\n  console.error('Error:', err);\n  \n  // If it's already our AppError, return it\n  if (err instanceof AppError) {\n    return {\n      statusCode: err.statusCode,\n      body: JSON.stringify(err.toResponse()),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n  }\n  \n  // Handle specific AWS SDK errors\n  if (err.code === 'ConditionalCheckFailedException') {\n    const appError = Errors.resourceNotFound('Resource', 'unknown');\n    return {\n      statusCode: appError.statusCode,\n      body: JSON.stringify(appError.toResponse()),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n  }\n  \n  // Handle other known AWS errors\n  if (err.code === 'ThrottlingException') {\n    const appError = Errors.rateLimitExceeded();\n    return {\n      statusCode: appError.statusCode,\n      body: JSON.stringify(appError.toResponse()),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n  }\n  \n  // Default to internal server error\n  const appError = Errors.internalError(err.message || 'An unexpected error occurred');\n  return {\n    statusCode: appError.statusCode,\n    body: JSON.stringify(appError.toResponse()),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n};", "import { dynamoClient } from '../clients/dynamo-client';\nimport { TABLES } from '../../common/constants';\nimport { TopicMetrics, SystemMetrics } from '../../common/types';\nimport { logger } from '../../common/logger';\nimport { Errors } from '../../common/errors';\nimport AWS from 'aws-sdk';\n\n// Initialize CloudWatch client\nconst cloudWatch = new AWS.CloudWatch();\n\nexport const calculateTopicMetrics = async (topicId: string): Promise<TopicMetrics> => {\n  logger.debug('Calculating topic metrics', { topicId });\n\n  try {\n    // Get the topic\n    const topicResult = await dynamoClient.get({\n      TableName: TABLES.TOPICS,\n      Key: { topicId },\n    }).promise();\n\n    if (!topicResult.Item) {\n      throw Errors.topicNotFound(topicId);\n    }\n\n    const topic = topicResult.Item;\n\n    // Get the most recent messages for rate calculation (last hour)\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\n\n    // Count messages from the last hour\n    const recentMessagesResult = await dynamoClient.scan({\n      TableName: TABLES.MESSAGES,\n      FilterExpression: '#ts >= :ts',\n      ExpressionAttributeNames: {\n        '#ts': 'timestamp',\n      },\n      ExpressionAttributeValues: {\n        ':ts': oneHourAgo,\n      },\n      Select: 'COUNT',\n    }).promise();\n\n    const recentMessagesCount = recentMessagesResult.Count || 0;\n    const publishRate = recentMessagesCount / 60; // messages per minute\n\n    // Get size statistics for messages (sample recent 100 messages)\n    const messageSizesResult = await dynamoClient.query({\n      TableName: TABLES.MESSAGES,\n      KeyConditionExpression: 'topicId = :topicId AND sequenceNumber >= :minSeq',\n      ExpressionAttributeValues: {\n        ':topicId': topicId,\n        ':minSeq': 0,\n      },\n      Limit: 100,\n      ScanIndexForward: false,\n      ProjectionExpression: '#size',\n      ExpressionAttributeNames: {\n        '#size': 'size',\n      },\n    }).promise();\n\n    const messageSizes = (messageSizesResult.Items || []).map((item) => item.size || 0);\n    const totalSize = messageSizes.reduce((sum, size) => sum + size, 0);\n    const averageMessageSize = messageSizes.length > 0\n      ? Math.round(totalSize / messageSizes.length)\n      : 0;\n\n    // Get oldest message\n    const oldestMessageResult = await dynamoClient.query({\n      TableName: TABLES.MESSAGES,\n      KeyConditionExpression: 'topicId = :topicId AND sequenceNumber >= :minSeq',\n      ExpressionAttributeValues: {\n        ':topicId': topicId,\n        ':minSeq': 0, // Broad range\n      },\n      Limit: 1,\n      ScanIndexForward: true, // Ascending order (oldest)\n      ProjectionExpression: '#ts',\n      ExpressionAttributeNames: {\n        '#ts': 'timestamp',\n      },\n    }).promise();\n\n    // Get newest message\n    const newestMessageResult = await dynamoClient.query({\n      TableName: TABLES.MESSAGES,\n      KeyConditionExpression: 'topicId = :topicId AND sequenceNumber >= :minSeq',\n      ExpressionAttributeValues: {\n        ':topicId': topicId,\n        ':minSeq': 0, // Broad range\n      },\n      Limit: 1,\n      ScanIndexForward: false, // Descending order (newest)\n      ProjectionExpression: '#ts',\n      ExpressionAttributeNames: {\n        '#ts': 'timestamp',\n      },\n    }).promise();\n\n    const oldestMessage = oldestMessageResult.Items && oldestMessageResult.Items.length > 0\n      ? oldestMessageResult.Items[0].timestamp\n      : 0;\n\n    const newestMessage = newestMessageResult.Items && newestMessageResult.Items.length > 0\n      ? newestMessageResult.Items[0].timestamp\n      : 0;\n\n    // Get consumer groups to calculate consume rate\n    const consumerGroupsResult = await dynamoClient.scan({\n      TableName: TABLES.CONSUMER_GROUPS,\n      FilterExpression: 'topicId = :topicId',\n      ExpressionAttributeValues: {\n        ':topicId': topicId,\n      },\n    }).promise();\n\n    const consumerGroups = consumerGroupsResult.Items || [];\n\n    // Calculate average consume rate\n    let totalConsumeRate = 0;\n    for (const group of consumerGroups) {\n      const groupId = group.groupId;\n\n      const offsetResult = await dynamoClient.get({\n        TableName: TABLES.OFFSETS,\n        Key: { groupId, topicId },\n      }).promise();\n\n      if (offsetResult.Item) {\n        const lastConsumedTimestamp = offsetResult.Item.lastConsumedTimestamp || 0;\n        const lastSequenceNumber = offsetResult.Item.lastSequenceNumber || 0;\n\n        if (lastConsumedTimestamp > oneHourAgo) {\n          const hoursSinceStart = (lastConsumedTimestamp - topic.createdAt) / (60 * 60 * 1000);\n          if (hoursSinceStart > 0) {\n            totalConsumeRate += lastSequenceNumber / (hoursSinceStart * 60); // per minute\n          }\n        }\n      }\n    }\n\n    const consumeRate = consumerGroups.length > 0\n      ? totalConsumeRate / consumerGroups.length\n      : 0;\n\n    return {\n      topicId,\n      name: topic.name,\n      messageCount: topic.messageCount || 0,\n      publishRate,\n      consumeRate,\n      averageMessageSize,\n      oldestMessage,\n      newestMessage,\n    };\n  } catch (error) {\n    logger.error('Error calculating topic metrics', { error, topicId });\n    throw error;\n  }\n};\n\n\nexport const calculateSystemMetrics = async (): Promise<SystemMetrics> => {\n  logger.debug('Calculating system metrics');\n\n  try {\n    const [topicsResult, messagesResult, consumerGroupsResult] = await Promise.all([\n      dynamoClient.scan({\n        TableName: TABLES.TOPICS,\n        Select: 'COUNT',\n      }).promise(),\n      dynamoClient.scan({\n        TableName: TABLES.MESSAGES,\n        Select: 'COUNT',\n      }).promise(),\n      dynamoClient.scan({\n        TableName: TABLES.CONSUMER_GROUPS,\n        Select: 'COUNT',\n      }).promise(),\n    ]);\n\n    const totalTopics = topicsResult.Count || 0;\n    const totalMessages = messagesResult.Count || 0;\n    const totalConsumerGroups = consumerGroupsResult.Count || 0;\n\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\n\n    const recentMessagesResult = await dynamoClient.scan({\n      TableName: TABLES.MESSAGES,\n      FilterExpression: '#ts >= :ts',\n      ExpressionAttributeNames: {\n        '#ts': 'timestamp',\n      },\n      ExpressionAttributeValues: {\n        ':ts': oneHourAgo,\n      },\n      Select: 'COUNT',\n    }).promise();\n\n    const recentMessagesCount = recentMessagesResult.Count || 0;\n    const averagePublishRate = recentMessagesCount / 60;\n\n    let totalConsumeCount = 0;\n\n    const consumerSampleResult = await dynamoClient.scan({\n      TableName: TABLES.OFFSETS,\n      Limit: 100,\n    }).promise();\n\n    const consumerSample = consumerSampleResult.Items || [];\n\n    for (const offset of consumerSample) {\n      if (offset.lastConsumedTimestamp > oneHourAgo) {\n        totalConsumeCount += offset.lastSequenceNumber || 0;\n      }\n    }\n\n    const averageConsumeRate = consumerSample.length > 0\n      ? (totalConsumeCount / consumerSample.length) / 60\n      : 0;\n\n    let storageUsed = 0;\n\n    const messageSizeSampleResult = await dynamoClient.scan({\n      TableName: TABLES.MESSAGES,\n      Limit: 100,\n      ProjectionExpression: '#size',\n      ExpressionAttributeNames: {\n        '#size': 'size',\n      },\n    }).promise();\n\n    const messageSizes = (messageSizeSampleResult.Items || []).map((item) => item.size || 0);\n\n    if (messageSizes.length > 0) {\n      const avgSize = messageSizes.reduce((sum, size) => sum + size, 0) / messageSizes.length;\n      storageUsed = avgSize * totalMessages;\n    }\n\n    return {\n      totalTopics,\n      totalMessages,\n      totalConsumerGroups,\n      averagePublishRate,\n      averageConsumeRate,\n      storageUsed,\n    };\n  } catch (error) {\n    logger.error('Error calculating system metrics', { error });\n    throw error;\n  }\n};\n\nexport const pushMetricsToCloudWatch = async (\n  topicMetrics: TopicMetrics[] = [],\n  systemMetrics?: SystemMetrics\n): Promise<void> => {\n  try {\n    const timestamp = new Date();\n    const metricData: AWS.CloudWatch.MetricData = [];\n\n    for (const topic of topicMetrics) {\n      metricData.push(\n        {\n          MetricName: 'MessageCount',\n          Dimensions: [\n            { Name: 'TopicId', Value: topic.topicId },\n            { Name: 'TopicName', Value: topic.name },\n          ],\n          Value: topic.messageCount,\n          Timestamp: timestamp,\n          Unit: 'Count',\n        },\n        {\n          MetricName: 'PublishRate',\n          Dimensions: [\n            { Name: 'TopicId', Value: topic.topicId },\n            { Name: 'TopicName', Value: topic.name },\n          ],\n          Value: topic.publishRate,\n          Timestamp: timestamp,\n          Unit: 'Count/Minute',\n        },\n        {\n          MetricName: 'ConsumeRate',\n          Dimensions: [\n            { Name: 'TopicId', Value: topic.topicId },\n            { Name: 'TopicName', Value: topic.name },\n          ],\n          Value: topic.consumeRate,\n          Timestamp: timestamp,\n          Unit: 'Count/Minute',\n        },\n        {\n          MetricName: 'AverageMessageSize',\n          Dimensions: [\n            { Name: 'TopicId', Value: topic.topicId },\n            { Name: 'TopicName', Value: topic.name },\n          ],\n          Value: topic.averageMessageSize,\n          Timestamp: timestamp,\n          Unit: 'Bytes',\n        }\n      );\n    }\n\n    if (systemMetrics) {\n      metricData.push(\n        {\n          MetricName: 'TotalTopics',\n          Value: systemMetrics.totalTopics,\n          Timestamp: timestamp,\n          Unit: 'Count',\n        },\n        {\n          MetricName: 'TotalMessages',\n          Value: systemMetrics.totalMessages,\n          Timestamp: timestamp,\n          Unit: 'Count',\n        },\n        {\n          MetricName: 'TotalConsumerGroups',\n          Value: systemMetrics.totalConsumerGroups,\n          Timestamp: timestamp,\n          Unit: 'Count',\n        },\n        {\n          MetricName: 'AveragePublishRate',\n          Value: systemMetrics.averagePublishRate,\n          Timestamp: timestamp,\n          Unit: 'Count/Minute',\n        },\n        {\n          MetricName: 'AverageConsumeRate',\n          Value: systemMetrics.averageConsumeRate,\n          Timestamp: timestamp,\n          Unit: 'Count/Minute',\n        },\n        {\n          MetricName: 'StorageUsed',\n          Value: systemMetrics.storageUsed,\n          Timestamp: timestamp,\n          Unit: 'Bytes',\n        }\n      );\n    }\n\n    const batchSize = 20;\n    for (let i = 0; i < metricData.length; i += batchSize) {\n      const batch = metricData.slice(i, i + batchSize);\n\n      await cloudWatch.putMetricData({\n        Namespace: 'MicroQueue',\n        MetricData: batch,\n      }).promise();\n    }\n  } catch (error) {\n    logger.error('Error pushing metrics to CloudWatch', { error });\n    throw error;\n  }\n};\n\nexport default {\n  calculateTopicMetrics,\n  calculateSystemMetrics,\n  pushMetricsToCloudWatch,\n};", "\nimport { dynamoClient } from '../clients/dynamo-client';\nimport { TABLES } from '../../common/constants';\nimport { Topic } from '../../common/types';\nimport { logger } from '../../common/logger';\nimport { Errors } from '../../common/errors';\n\n\nexport const createTopic = async (topic: Topic): Promise<Topic> => {\n  logger.debug('Creating topic', { topicId: topic.topicId });\n  \n  try {\n    await dynamoClient.put({\n      TableName: TABLES.TOPICS,\n      Item: topic,\n      ConditionExpression: 'attribute_not_exists(topicId)',\n    }).promise();\n    \n    return topic;\n  } catch (error) {\n    logger.error('Error creating topic', { error, topic });\n    \n    if ((error as any).code === 'ConditionalCheckFailedException') {\n      throw Errors.topicAlreadyExists(topic.name);\n    }\n    \n    throw error;\n  }\n};\n\n\nexport const getTopic = async (topicId: string): Promise<Topic> => {\n  logger.debug('Getting topic', { topicId });\n  \n  try {\n    const result = await dynamoClient.get({\n      TableName: TABLES.TOPICS,\n      Key: { topicId },\n    }).promise();\n    \n    if (!result.Item) {\n      throw Errors.topicNotFound(topicId);\n    }\n    \n    return result.Item as Topic;\n  } catch (error) {\n    logger.error('Error getting topic', { error, topicId });\n    \n    if ((error as any).code === 'ResourceNotFoundException') {\n      throw Errors.topicNotFound(topicId);\n    }\n    \n    throw error;\n  }\n};\n\nexport const getTopicByName = async (name: string): Promise<Topic | null> => {\n  logger.debug('Getting topic by name', { name });\n  \n  try {\n    const result = await dynamoClient.scan({\n      TableName: TABLES.TOPICS,\n      FilterExpression: '#name = :name',\n      ExpressionAttributeNames: {\n        '#name': 'name',\n      },\n      ExpressionAttributeValues: {\n        ':name': name,\n      },\n      Limit: 1,\n    }).promise();\n    \n    if (result.Items && result.Items.length > 0) {\n      return result.Items[0] as Topic;\n    }\n    \n    return null;\n  } catch (error) {\n    logger.error('Error getting topic by name', { error, name });\n    throw error;\n  }\n};\n\n\nexport const listTopics = async (): Promise<Topic[]> => {\n  logger.debug('Listing topics');\n  \n  try {\n    const result = await dynamoClient.scan({\n      TableName: TABLES.TOPICS,\n    }).promise();\n    \n    return (result.Items || []) as Topic[];\n  } catch (error) {\n    logger.error('Error listing topics', { error });\n    throw error;\n  }\n};\n\n\nexport const deleteTopic = async (topicId: string): Promise<void> => {\n  logger.debug('Deleting topic', { topicId });\n  \n  try {\n    await dynamoClient.delete({\n      TableName: TABLES.TOPICS,\n      Key: { topicId },\n      ConditionExpression: 'attribute_exists(topicId)',\n    }).promise();\n  } catch (error) {\n    logger.error('Error deleting topic', { error, topicId });\n    \n    if ((error as any).code === 'ConditionalCheckFailedException') {\n      throw Errors.topicNotFound(topicId);\n    }\n    \n    throw error;\n  }\n};\n\n\nexport const incrementMessageCount = async (topicId: string, timestamp: number): Promise<void> => {\n  logger.debug('Incrementing topic message count', { topicId, timestamp });\n  \n  try {\n    await dynamoClient.update({\n      TableName: TABLES.TOPICS,\n      Key: { topicId },\n      UpdateExpression: 'SET messageCount = messageCount + :inc, lastMessageTimestamp = :ts',\n      ExpressionAttributeValues: {\n        ':inc': 1,\n        ':ts': timestamp,\n      },\n      ConditionExpression: 'attribute_exists(topicId)',\n    }).promise();\n  } catch (error) {\n    logger.error('Error incrementing message count', { error, topicId });\n    \n    if ((error as any).code === 'ConditionalCheckFailedException') {\n      throw Errors.topicNotFound(topicId);\n    }\n    \n    throw error;\n  }\n};\n\n\nexport const updateTopic = async (\n  topicId: string,\n  updates: Partial<Omit<Topic, 'topicId' | 'createdAt'>>\n): Promise<Topic> => {\n  logger.debug('Updating topic', { topicId, updates });\n  \n  // Build update expression\n  const updateExpressions: string[] = [];\n  const expressionAttributeNames: Record<string, string> = {};\n  const expressionAttributeValues: Record<string, any> = {};\n  \n  Object.entries(updates).forEach(([key, value]) => {\n    if (value !== undefined) {\n      updateExpressions.push(`#${key} = :${key}`);\n      expressionAttributeNames[`#${key}`] = key;\n      expressionAttributeValues[`:${key}`] = value;\n    }\n  });\n  \n  if (updateExpressions.length === 0) {\n    return getTopic(topicId);\n  }\n  \n  try {\n    await dynamoClient.update({\n      TableName: TABLES.TOPICS,\n      Key: { topicId },\n      UpdateExpression: `SET ${updateExpressions.join(', ')}`,\n      ExpressionAttributeNames: expressionAttributeNames,\n      ExpressionAttributeValues: expressionAttributeValues,\n      ConditionExpression: 'attribute_exists(topicId)',\n      ReturnValues: 'NONE',\n    }).promise();\n    \n    return getTopic(topicId);\n  } catch (error) {\n    logger.error('Error updating topic', { error, topicId });\n    \n    if ((error as any).code === 'ConditionalCheckFailedException') {\n      throw Errors.topicNotFound(topicId);\n    }\n    \n    throw error;\n  }\n};\n\nexport default {\n  createTopic,\n  getTopic,\n  getTopicByName,\n  listTopics,\n  deleteTopic,\n  incrementMessageCount,\n  updateTopic,\n};", "import { \n    TopicMetrics,\n    SystemMetrics,\n  } from '../common/types';\n  import metricRepository from '../data/repositories/metric-repository';\n  import topicRepository from '../data/repositories/topic-repository';\n  import logger from '../common/logger';\n\n  export const getTopicMetrics = async (topicId: string): Promise<TopicMetrics> => {\n    logger.debug('Getting topic metrics', { topicId });\n    \n    // Verify the topic exists\n    await topicRepository.getTopic(topicId);\n    \n    return metricRepository.calculateTopicMetrics(topicId);\n  };\n  \n \n  export const getAllTopicMetrics = async (): Promise<TopicMetrics[]> => {\n    logger.debug('Getting all topic metrics');\n    \n    // Get all topics\n    const topics = await topicRepository.listTopics();\n    \n    // Calculate metrics for each topic\n    const metricsPromises = topics.map(topic => \n      metricRepository.calculateTopicMetrics(topic.topicId)\n    );\n    \n    return Promise.all(metricsPromises);\n  };\n  \n  export const getSystemMetrics = async (): Promise<SystemMetrics> => {\n    logger.debug('Getting system metrics');\n    return metricRepository.calculateSystemMetrics();\n  };\n  \n\n  export const collectAndPublishMetrics = async (): Promise<void> => {\n    logger.debug('Collecting and publishing metrics');\n    \n    try {\n      // Get system metrics\n      const systemMetrics = await getSystemMetrics();\n      \n      // Get topic metrics for a subset of topics (to avoid overloading)\n      const topics = await topicRepository.listTopics();\n      const topicSample = topics.slice(0, 10); // Limit to 10 topics\n      \n      const topicMetrics = await Promise.all(\n        topicSample.map(topic => metricRepository.calculateTopicMetrics(topic.topicId))\n      );\n      \n      // Publish metrics to CloudWatch\n      await metricRepository.pushMetricsToCloudWatch(topicMetrics, systemMetrics);\n      \n      logger.info('Metrics published successfully');\n    } catch (error) {\n      logger.error('Error collecting and publishing metrics', { error });\n      // Don't rethrow - this is a background job\n    }\n  };\n  \n  \n  export const getDashboardMetrics = async (): Promise<{\n    system: SystemMetrics;\n    topics: TopicMetrics[];\n  }> => {\n    logger.debug('Getting dashboard metrics');\n    \n    // Get system metrics\n    const systemMetrics = await getSystemMetrics();\n    \n    // Get all topics\n    const topics = await topicRepository.listTopics();\n    \n    // For large systems, limit the number of topics to avoid overloading\n    const limitedTopics = topics.slice(0, 20); // Limit to 20 topics\n    \n    // Calculate metrics for each topic\n    const topicMetrics = await Promise.all(\n      limitedTopics.map(topic => metricRepository.calculateTopicMetrics(topic.topicId))\n    );\n    \n    // Sort by message count descending\n    topicMetrics.sort((a, b) => b.messageCount - a.messageCount);\n    \n    return {\n      system: systemMetrics,\n      topics: topicMetrics,\n    };\n  };\n  \n  export default {\n    getTopicMetrics,\n    getAllTopicMetrics,\n    getSystemMetrics,\n    collectAndPublishMetrics,\n    getDashboardMetrics,\n  };"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "fs", "path", "os", "crypto", "packageJson", "version", "LINE", "parse", "src", "obj", "lines", "match", "key", "value", "maybeQuote", "_parseVault", "options", "vaultPath", "_vaultPath", "result", "DotenvModule", "err", "keys", "_dotenvKey", "length", "decrypted", "attrs", "_instructions", "error", "_log", "message", "_warn", "_debug", "dotenvKey", "uri", "environment", "environmentKey", "ciphertext", "possibleVaultPath", "filepath", "_resolveHome", "envPath", "_configVault", "parsed", "processEnv", "configDotenv", "dotenvPath", "encoding", "debug", "optionPaths", "lastError", "parsedAll", "e", "config", "decrypt", "encrypted", "keyStr", "nonce", "authTag", "aesgcm", "isRange", "invalidKeyLength", "decryptionFailed", "populate", "override", "metrics_aggregator_exports", "__export", "handler", "__toCommonJS", "import_aws_sdk", "dotenv", "options", "dynamoClient", "ENV", "STAGE", "TABLES", "BUCKETS", "LIMITS", "ERROR_CODES", "HTTP_STATUS", "dotenv", "LOG_LEVEL_MAP", "logLevel", "logFormat", "currentLogLevel", "formatLogMessage", "level", "message", "data", "timestamp", "requestId", "logObject", "logMessage", "Logger", "logger", "logger_default", "AppError", "code", "message", "statusCode", "details", "Errors", "ERROR_CODES", "HTTP_STATUS", "resource", "id", "topicId", "name", "messageId", "size", "maxSize", "groupId", "import_aws_sdk", "cloudWatch", "AWS", "calculateTopicMetrics", "topicId", "logger", "topicResult", "dynamoClient", "TABLES", "Errors", "topic", "oneHourAgo", "publishRate", "messageSizes", "item", "totalSize", "sum", "size", "averageMessageSize", "oldestMessageResult", "newestMessageResult", "oldestMessage", "newestMessage", "consumerGroups", "totalConsumeRate", "group", "groupId", "offsetResult", "lastConsumedTimestamp", "lastSequenceNumber", "hoursSinceStart", "consumeRate", "error", "calculateSystemMetrics", "topicsResult", "messagesResult", "consumerGroupsResult", "totalTopics", "totalMessages", "totalConsumerGroups", "averagePublishRate", "totalConsumeCount", "consumerSample", "offset", "averageConsumeRate", "storageUsed", "pushMetricsToCloudWatch", "topicMetrics", "systemMetrics", "timestamp", "metricData", "batchSize", "i", "batch", "metric_repository_default", "createTopic", "topic", "logger", "dynamoClient", "TABLES", "error", "Errors", "getTopic", "topicId", "result", "getTopicByName", "name", "listTopics", "deleteTopic", "incrementMessageCount", "timestamp", "updateTopic", "updates", "updateExpressions", "expressionAttributeNames", "expressionAttributeValues", "key", "value", "topic_repository_default", "getTopicMetrics", "topicId", "logger_default", "topic_repository_default", "metric_repository_default", "getAllTopicMetrics", "metricsPromises", "topic", "getSystemMetrics", "collectAndPublishMetrics", "systemMetrics", "topicSample", "topicMetrics", "error", "getDashboardMetrics", "limitedTopics", "a", "b", "metric_service_default", "handler", "event", "context", "logger_default", "metric_service_default", "error"]
}
